     // recursive call here ---------- but should it visit each thing like in lab1, 16 solve calls? why
    // oh are we doing a solution by line thing  // this is gonna run you through each block what if you reach a word and it doesnt work then

    /*
     // is valid here to see if your solve is good 
     boolean anOption = isValid(0,0,0);

     // dealing with what isValid returned but what is the recursive call supposed to look like? Lab 1? 

     if (anOption == true) {

            // not sure what this is doing yet // append my StringBuilders
           // colStr[0].append('l');
           // rowStr[0].append('l');
            
    }
    else {
          // do not add the valid letter   
    }
    */



/*/
				StringBuilder colStr = new StringBuilder(ourBoard.length);
				StringBuilder rowStr = new StringBuilder(ourBoard.length);
				showBoard();
				System.out.println(row);
				System.out.println(col);

				rowStr = rebuildStringA(rowStr, row, col);
				colStr = rebuildStringB(colStr, row, col);

				System.out.println("rowString_after_proceed_false_ : " + rowStr);
				System.out.println("	colString_after_proceed_false_ : " + colStr);
				*/
/*
 * To check in surrounding directions if your placement screwed up the crossword, but 
 * you cant even declare them as class variables because you dont know how many you are going to need,
 * so that means you have to load them as you start a new crossword tile and work with the two declared 
 */


// prefix check - how should I declare StringBuilders, whats the point of putting it for each row and col?



// for each letter that can go into a cell 
// alphabet array that tries each letter and then does the prefix check

// FOR SOLVING VERTICALLY : If you can check the surrounding quadrants and get a hit then you are still solving vertically, do they all need to hit or just one?

// if you make it through all 26 then.... go back right but wont it find the same result. OFFICE HOURS
// if you make it through all 26 mark the previuos letter and then add a check in conditional to not use that letter again to prevent you from getting infinite recursion
// how do you do that? 

// deja vue, alphabetArray[index].toUpper 
// how do I reset? (toLower) // mark it before moving on to next recursive call reset after you get to a new word
// { A , e , I , O , u}
// needs to be reset with the new StringBuilder calls 

// call solve, capatalize previous letter and then go back

/*
 * else if (colResultCheck == 2 && row == ourBoard.length) {
									solve(row+1, col, depth+1); // SPCECIAL CASE
								}


								
								
// kinda crazy, im gonna reinitialize the stringbuilders
									/*
								 	colStr = new StringBuilder(ourBoard.length);
								 	rowStr = new StringBuilder(ourBoard.length);
									showBoard();
									System.out.println(row);
									System.out.println(col);

									rowStr = rebuildStringA(rowStr, row, col);
									colStr = rebuildStringB(colStr, row, col);
									*/

/*
 * 		/*
                int counter = 0;

				
				for (int i = 0; i < col; i++) {

					showBoard();
					// rowStr.append 
					if (ourBoard[row][col] != '-') { // that does not work at all damnit

						rowStr.append(ourBoard[row][counter]); 
                        counter++;
						System.out.println("ROW STR" + rowStr + "\n");
					}
					else {
						break; // breaks you out of for loop, word has ended 
						//colStr.capacity()-1
					}
				}

                counter = 0;
				for (int i = 0; i < row; i++) { // should be swapped since col is counting

					showBoard();
					if (ourBoard[row][col] != '-') {

						colStr.append(ourBoard[counter][col]); 
                        counter++;
						System.out.println("COL STR: " + colStr + "\n");
					}
					else {
						break; // breaks you out of for loop, word has ended in crossword
					}

				}

 */

 // if you are going to add it to the thing add it to the string builder for the prefix check
				/*
				 * Might run into issue with the first word coming out as eel everytime since the colStr is gonna be 0 for the first row 
				 */

				// *IMPORTANT* never makes it to ourBoard.length because isValid catches it 
				/*
				 * Should I just put the base case in here and see what happens? 
				 */
							// what happens if you are in the last row, would return a word 
							
		// if not valid // check if last in rowif last in row: call solve of row + 1
 */

		// the string builders should be class variables... but shouldn't you have 

			//	StringBuilder colStr = new StringBuilder(ourBoard.length);
			//	StringBuilder rowStr = new StringBuilder(ourBoard.length); // will eventually need to be counted vertically ourBoard.length
 /*
  * 	if ((colResultCheck == 2  && row < ourBoard.length-1)) { // might need to be rowStr.length()-1
									ourBoard[row][col+1] = alphabetArray[i];
                                  
									// This call could be optimized to prevent isValid return of false 
									solve(row,col+1, depth+1);           
								}
								else if (colResultCheck == 3  && row < ourBoard.length-1) {
									ourBoard[row][col] = alphabetArray[i];
                                    solve(row,col+1,depth+1);
								}
  */

  //* this is popping off the stack at a not good time NEED to use tail recursion

					/*
					// snag prev letter that lead to solvable 
					int deleted = rowStr.length()-2; // grabbing index of next to last char
					char prev = rowStr.charAt(deleted);

					for (int j=0; j < alphabetArray.length-1; j++) {

						if (prev == alphabetArray[j]) {

							Character.toUpperCase(alphabetArray[j]);
						}
					}

					solve(row,col-1,depth-1);
					*/
// okay yeah basically reomove progress, replace it with a + but keep the previous letter used capatalized in the array before hand
// needs a for loop 
// have a conditional check for that special case and solve vertically from there  --- letters are words in Dictionary class, dont need to worry about solving vertically can solve horizontally every time

	if (Character.isLowerCase(alphabetArray[i])) { // if the character has not been marked (prevents infinite)

}
						else { // character is marked (just need to go to next char in alphabetArray)

							/*
							 * could unmark it right here, could be efficeint since it moves on, does that cause for loop errors?  
							 * you are only using loop for one 26 letter iteration, so should be fine, but you do have to bank on hitting it again which you will 
							 */

							Character.toLowerCase(alphabetArray[i]); // resetting it back to lower for further use and then it will check the next letter

						}
/*
 * 

 
/*

 * for (int i=0; i < alphabetArray.length; i++) {

			System.out.println("Length of alphabetarray" + alphabetArray[i]); // should be 26?
		}

		//System.out.println("ROW STRING toSTring: " + rowStr.toString());
										//System.out.println("LENGTH: " + rowStr.capacity());
										//System.out.println("eel? " + blackListed[j]);
 */

 	/*
							 * The reason that you are not incrementing col in the recursive col anymore is because it is already at the end of the segment for it to get here in the code 
							 */


	/*
			 * a g e
               g a d
			   y + +
			 */

			 /*
			  * a g e
				h a d
				+ + +
			  */



			  
			if (col == -1) {

				col = ourBoard.length-1;
				row --;

			rowStr = new StringBuilder(); // THIS MIGHT BE A PROBLEM BUT YOU GOT EAT
			colStr = new StringBuilder();

			rowStr = rebuildStringA(rowStr,row,col);
			colStr = rebuildStringB(colStr,row,col);
			
			//colStr.deleteCharAt(row-1);

			System.out.println(" SPECIAL CASE After deletion: (row) " + rowStr);
			System.out.println(" SPECIAL CASE After deletion: (col) " + colStr);

			specialCase1 = true;
				
			}
 */


 // I need you to go back to the start of the above word  // SPECIAL CASE  // SPECIAL CASE // SPECIAL  // for recursing the whole back up a row
				if (col == 0 ) {
					recurseTimes = true;
				}



				rowStr = new StringBuilder(); // THIS MIGHT BE A PROBLEM BUT YOU GOT EAT
				colStr = new StringBuilder();
	
				
				rowStr = rebuildStringA(rowStr,row,col);
				colStr = rebuildStringB(colStr,row,col);


				//System.out.println("YATA Reinitialize the StringBuilders");
			rowStr = rebuildStringA(rowStr,row,col);
			colStr = rebuildStringB(colStr,row,col);
	 

			// if '+' , start the process -- might need to change 
			if (ourBoard[row][col] == '+') {


				
					rowStr.append(alphabetArray[i]); // always moving left to right so append right and then check search prefix for both
					
				
				if (col < ourBoard.length-1) { // if not at the last column, find a prefix 

					//System.out.println("		COL is currently" + col);

					for (int i = 0; i < alphabetArray.length-1; i++) { // going to try all 26 letters

							//showBoard();
							
						
								colStr.append(alphabetArray[i]);  // need to applied to column too 
							
						//	System.out.println("row string after append: " + rowStr);
						//	System.out.println("	Column string after append: " + colStr);

						//dictionary.class.searchPrefix(rowStr);

					
							int rowResultCheck = dictionary.searchPrefix(rowStr); 
						//	System.out.println("Rrresult: " + rowResultCheck);

							if (rowResultCheck == 1 || rowResultCheck == 3) { // prefix but not a word -- I think we are only searching for prefixes ::: NOPE can also be a word but cannot be 2

								int colResultCheck = dictionary.searchPrefix(colStr);

						//		System.out.println("COL CHECK: " + colResultCheck);

								if ((colResultCheck == 1 && row != ourBoard.length-1) || colResultCheck == 3 || row == 0) { // automatically going to pass a col check on first row everytime
									//showBoard(); 
                                    ourBoard[row][col] = alphabetArray[i];
									//showBoard();

									// clear string builders right? or maybe mess with it in the above initial loading
									rowStr = new StringBuilder();
									colStr = new StringBuilder();

									// RECURSIVE CALL 1 ------------------------------------------------------------------------
									goodFind = solve(row,col+1, depth+1, dictionary); // MOVE ON to next space // WHY DO I NEED TO STEP INTO????
									

									if (goodFind == true) {
                                       //return false;
									   return true;
									}
									else {
										ourBoard[row][col] = '+';

										if (recurseTimes == true) {
												if (col == 0) {
													recurseTimes = false;
													
												}
												else {
													return false;
												}
											
										}
											
											
										
										//	return false;// 
										//solve(row, col-1, depth+1);
									}

									
								} // MARK point where the recursion goes back to once it backtracks ----------
								else {

									// if you do not pass the column, need to wipe that letter appended since it wont reach the else (deletion)
									rowStr.deleteCharAt(col);
									colStr.deleteCharAt(row);
								}
							}
							else {

								rowStr.deleteCharAt(col); // removes invalid letter before trying again
								if (row != 0) {
									colStr.deleteCharAt(row);
								}

								// Row string should 
						//		System.out.println("						After deletion: (row) " + rowStr);
						//		System.out.println("						After deletion: (col) " + colStr);
							}  

						//System.out.println("end of for loop"); 

					}

					
					


				} // end of PART 1 Now onto if you are at the end of the row or LAST COLUMN (word search prefix) -----------------------------------------------------------------------------------------------------------------------------------------------
				else { // -------------------------------------------------------------------------------------------------
					// word check ----------------------------------------------------------


					// okay // for alphabet 

					//System.out.println("is this needed and did we even make it here \n\n\n\n");

					for (int i = 0; i < alphabetArray.length-1; i++) { // going to try all 26 letters -------------------------
						
							rowStr.append(alphabetArray[i]); // always moving left to right so append right and then check search prefix for both
							if (row != 0) {
								colStr.append(alphabetArray[i]);

							}

							System.out.println("row string after append: " + rowStr);
							System.out.println("	Column string after append: " + colStr);


							int rowResultCheck = dictionary.searchPrefix(rowStr); 
							System.out.println("Rrresult: " + rowResultCheck);

							
							if (rowResultCheck == 2 || rowResultCheck == 3) { // WORD or a word and a prefix 
								int colResultCheck = dictionary.searchPrefix(colStr);

								if ((colResultCheck == 2 && row < ourBoard.length-1) || (colResultCheck == 3 && row < ourBoard.length-1 || row == 0)) {
									
									boolean decision = true;
									for (int j=0; j < blackListNum; j++) {

										if (blackListed[j].equals(rowStr.toString())) {
											// word is blacklisted do not recurse
											decision = false;
										} 
									}
									//System.out.println(Arrays.toString(blackListed));

									if (decision == true) {
										blackListed[blackListNum] = rowStr.toString();
										blackListNum++;
										ourBoard[row][col] = alphabetArray[i];
										showBoard();

										// RECURSIVE CALL 2 ----------------------------------------------------
										rowStr = new StringBuilder();
										colStr = new StringBuilder();
									

										// this needs a boolean return false
										// if  
						
										goodFind = solve(row,col+1,depth+1, dictionary); // RECURSE SHOULD BE AT THE END
								

										 if (goodFind == true) { // YATA
                                             return true;
                                    	 }
										 else {
											ourBoard[row][col] = '+';


											if (recurseTimes == true) {
												if (col == 0) {
													recurseTimes = false;
													
												}
												else {
													return false;
												}
											
											}
											
										 }
										 // if false  --- should be type boolean
										 	// return
										// if true 
										 // recurse call 


									} // besides that dont do anything no viable solution found 
									

								}
                                else if ((colResultCheck == 2  && row == ourBoard.length-1) || (colResultCheck == 3  && row == ourBoard.length-1) ) { // MAGIC RETURN 
                                   
                                	//System.out.println("LASTE TILE HAS BEEN REACH");
                                    ourBoard[row][col] = alphabetArray[i];
                                //    showBoard();
                                    finished = true;
                                	
                                	
                                	return finished; // BASE CASE // BASE CASE // BASE CASE // BASE CASE 
                                }
										//System.out.println("I" + i);
										rowStr.deleteCharAt(col); 
										if (row != 0 ) {

											colStr.deleteCharAt(row);
										}
	
							//			System.out.println("	After deletion: (row) " + rowStr);
							//			System.out.println("	After deletion: (col) " + colStr);
				
								// the end of fillPuzzle
                               
							}
							else {
								
								rowStr.deleteCharAt(col); // removes invalid letter before trying again
								if (row != 0) {
									colStr.deleteCharAt(row);
								}

							//	System.out.println("			After deletion: (row) " + rowStr);
							//	System.out.println("			After deletion: (col) " + colStr);
							}  
						} 
					

				}


			}
		

			System.out.println("----------------------- EXHAUSTED ALL POSSIBLE OPTIONS GOING BACK -------------------------------------------");
		
			
			// CANNOT MANUALLY UPDATE ROW AND CALL 
			//rowStr.deleteCharAt(col); // removes invalid
			// Still might need to use specialCase to avoid the deletion in the stringBuilders printing out an error


	

	
			//	System.out.println(" POST RECURSE After deletion: (row) " + rowStr);
			//	System.out.println(" POST RECURSE After deletion: (col) " + colStr);
			
	
		// if not valid // check if last in rowif last in row: call solve of row + 1

		// System.out.println("Good Find: " + goodFind);
		 return goodFind;

	}


	
			if (col == ourBoard.length) {
				//System.out.println("		The end of segment should have popped");
				// you have reached the end of the row // not sure how to use depth
				//solve(row+1,0,depth+1);
				//row = row + 1;
				//col = 0;
				
				//System.out.println("did you fail within the new recursive call");
				
				// make everything on a seperate call stack
				goodFind = solve(row+1,0,depth+1, dictionary);

				if (goodFind == true) {
					return true;
				}
				else {
					return false;
				}
				// something needs to be done with the the backtracking
				
			}
			


	
	public StringBuilder rebuildStringA (StringBuilder rowStr , int row, int col) {

		int counter = 0;

				for (int i = 0; i < col; i++) {

				//	showBoard();
					// rowStr.append 
					if (ourBoard[row][col] != '-') { // that does not work at all damnit

						rowStr.append(ourBoard[row][counter]); 
                        counter++;
					//	System.out.println("ROW STR" + rowStr + "\n");
					}
					else {
						break; // breaks you out of for loop, word has ended 
						//colStr.capacity()-1
					}
				}

		return rowStr;
	}

	public StringBuilder rebuildStringB (StringBuilder colStr , int row, int col) {

		int counter = 0;
				for (int i = 0; i < row; i++) { // should be swapped since col is counting

				//	showBoard();
					if (ourBoard[row][col] != '-') {

						colStr.append(ourBoard[counter][col]); 
                        counter++;
					//	System.out.println("COL STR: " + colStr + "\n");
					}
					else {
						break; // breaks you out of for loop, word has ended in crossword
					}

				}

			return colStr;
	}


		/*
							if (col > ourBoard.length-1) { // col is outside of table
								
								boolean goodFind3 = solve(row+1, 0, depth+1, dictionary);

									
								if (goodFind3 == true) {
								
									return true;
								}
								else {
			
								// delete the appends 
									ourBoard[row][col] = '+';
							
									rowStr1[row].deleteCharAt(col);
									colStr1[col].deleteCharAt(row);
									// same stuff right?
								}
							}
							*/

				/*if (recurseTimes == true) {
								if (col == 0) {
										recurseTimes = false;
														
								}
								else {
									return false;
								}
								*/	



						// might be deleting at the wrong columns and rows but if you add anything then that might be a sticky situation, still need a seperate call stack 
							// for going to a new row, do I need one for going up a row?? maybe 


							
		// Initializing the StringBuilders
		 rowStr2 = new StringBuilder[ourBoard.length];
		 colStr2 = new StringBuilder[ourBoard.length];

		 rowLastMinusPos2 = new int[ourBoard.length]; // generating a bunch of zeros
		 colLastMinusPos2 = new int[ourBoard.length]; 

		 boolean isValidPuzzle = true;
		// Creating StringBuilder objects
		for (int k=0; k < ourBoard.length; k++) {
			rowStr2[k] = new StringBuilder();
			colStr2[k] = new StringBuilder();
		}


		// Filling the StringBuilders 
		 for (int i=0; i < ourBoard.length; i++) {
			// here here
			for (int j=0; j < ourBoard.length; j++) {
				rowStr2[i].append(ourBoard[i][j]);
				colStr2[i].append(ourBoard[j][i]);

				if (ourBoard[i][j] == '-') { // theres a minus!
					
					rowLastMinusPos2[i] = i;
					colLastMinusPos2[i] = j;
				}
			
			}

			// loading -1's no minus sign
			if (rowLastMinusPos2[i] == 0 && colLastMinusPos2[i] == 0) {
				rowLastMinusPos2[i] = -1;
				colLastMinusPos2[i] = -1;
			}
			
			// column append
			//System.out.println("Row String String Builder " + rowStr2[i]);
			//System.out.println("Col String Builder Array " + colStr2[i]);



boolean recurseTimes = false; // set equal to col? while its greater than col, return false until its 
	
	StringBuilder rowStr = new StringBuilder();
	StringBuilder colStr = new StringBuilder();
	


	// creating an array of stringBuilders that
	StringBuilder[] rowStr2;
	StringBuilder[] colStr2;

	private int[] rowLastMinusPos2;
	private int[] colLastMinusPos2;


	int rowResultCheck = dictionary.searchPrefix(rowStr1[i], 0, rowLastMinusPos1[i]);
				int rowResultCheck2 = dictionary.searchPrefix(rowStr1[i], rowLastMinusPos1[i], ourBoard.length);
				
				// if not a word
				if (rowResultCheck != 3 || rowResultCheck2 != 3) {

					// if black space is at the start
					if (rowLastMinusPos1[i] == 0) {
						// special case black space is in first column
						if (rowResultCheck2 != 3) {
							isValidPuzzle = false;
						}
					}
					else if(rowLastMinusPos1[i] == ourBoard.length-1) {
						// special case is in last column
						if (rowResultCheck != 3) {
							isValidPuzzle = false;
						}
					}
				
				}


				
	/*
						 * 3
							c++
							++x
							+w+

							c p a
							p a x
							a w e
							CPA
							PAX
							AWE
						 */



		 // so uh how do we wanna do this one 

		 // Show user the board -- do a bunch of System.out's
		//System.out.println("\n\n\n\n\n\n\n\n");
		//showBoard();


		/*
		 * Reasoning 
		 * Solution Found: 
			a 	b 	a 	
			b 	a 	n 	
			a 	n 	a 	

			given in our example

		 */
		/*
		* e e l
			a t e
			r c a
			EEL
			ATE
			RCA
		 */

		 // read the filled board into StringBuilders
		 
		 // if you find a '-' then you gotta make sure that the before and after is a word as well. 

		 // what is the point of emptyBoard?  Empty board is theBoard orginale

		 /*
		  * int rowResultCheck = 0;
		
			if (col == 0) {
				rowResultCheck = 2;
			}
			else {

				rowResultCheck = dictionary.searchPrefix(rowStr1[row],0,col);
			}
			//System.out.println("rowResultCheck " + rowResultCheck);
			
			
				if (rowResultCheck == 2 || rowResultCheck == 3) { // prefix but not a word -- I think we are only searching for prefixes ::: NOPE can also be a word but cannot be 2

					int colResultCheck = dictionary.searchPrefix(colStr1[col],0,row);

						//	System.out.println("COL CHECK: " + colResultCheck);

					if ( colResultCheck == 3 || colResultCheck == 2 || row == 0) { // automatically going to pass a col check on first row everytime
						
						//(colResultCheck == 1 && row != ourBoard.length-1) ||

							return true;
						
						
					}
				}
									
		  */

							// append with no proceed, same code afterwards because you might have to recurse back before it. 
				// append with special proceed that takes into account the - splitting up the words 
				// how does that work with splitting up the words.... // different isValid that is

				
				// or same isValid just utilizing beging and end
				// how to solve with - special isValid that handles begin, end, and so on

				// immediately skip because it is a black space in the crossword
				//solve(row,col+1,depth+1);


				/*
	// now we are ready for recursive call, need a base case, and modifier, 
		// so do I need a variable to update pointers or is that what stringBuilder is meant for 
	 * // Show user the board --------------------------------------------------------------
		for (int i = 0; i < ourBoard.length; i++)
		{
			for (int j = 0; j < ourBoard.length; j++)
			{
				//System.out.print(ourBoard[i][j] + " ");
			}
			//System.out.println();
		}
		//System.out.println("THE LENGTH: " + ourBoard.length);
	 */

	 // prefix but not a word -- I think we are only searching for prefixes ::: NOPE can also be a word but cannot be 2
	 // why is row < ourBoard.length-1 why does that matter // there was a row < ourBoard.length-1 but that doesnt make any sense and could have been the downfall of your demise


    
		 // okay now I have the string Builders I feel like I need the Minuspos and Plus pos now to generate indexes
		 // generate lastMinusPos and
		 // and then what, check each string builder to see if it contains '-' if it doesnt
		 // can check rows and columns seperately --- exp. Because if one of the stringBuilders is not a word you have found a bad puzzle


		 // if you find a minus in Check puzzle watcha gonna do?  
				// if minus in first col check, one searchPrefix with 1-end 
				// if minus in last col, one searchPrefix with 0-ourBoard.length-1
				// if minus in middle, find index of minus and save it, two search prefixes, 0-minus, minus to ourBoard